#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:
  - &output_timeout_param
      description: Elapsed time command can run without output
      type: string  # decimal with unit suffix, such as “20m”, “1.25h”, “5s”
      default: 15m



version: 2.1
description: Commands useful for building/deploying elements

#
# Machines that can be used for build. Build-classic is typically
# what you want to use.
#
executors:

  # Machine used to build docker containers using the
  # CircleCI classic image
  build-classic:
    machine:
      enabled: true
      docker_layer_caching: true
      image: circleci/classic:201808-01

  # Machine used to build docker containers using the
  # CircleCI classic image
  build-classic-nocache:
    machine:
      enabled: true
      image: circleci/classic:201808-01

  # Ubuntu 16.04 machine used to build some images
  # comes with Docker 19.03.8 and docker-compose 1.25.5
  # This is useful since `buildx`, which is required in order
  # to cross-compile images, comes standard in Docker 19.03
  build-ubuntu:
    machine:
      enabled: true
      docker_layer_caching: true
      image: ubuntu-1604:202004-01

  # Ubuntu 16.04 machine used to build some images
  # comes with Docker 19.03.8 and docker-compose 1.25.5
  # This is useful since `buildx`, which is required in order
  # to cross-compile images, comes standard in Docker 19.03
  build-ubuntu-nocache:
    machine:
      enabled: true
      image: ubuntu-1604:202004-01


#
# Commands that are useful for build and deploy
#
commands:

  # Install Git LFS
  install_git_lfs:
    description: Install Git Large File Storage (LFS) in ubuntu
    steps:
      - run:
          name: Download and install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install -f git-lfs && git lfs install
      - run:
          name: Authenticate Git LFS
          command: |
            mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download

  # Update submodules (parallelized)
  update_submodules:
    steps:
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive --jobs 8

  # Log into docker
  docker_login:
    description: "Logs into Dockerhub"
    steps:
      - run:
          name: Docker Login
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

  # Build and tag stage of multi-stage Dockerfile
  build_stage:
    description: "Build and tag a stage of a multi-stage Docker build"
    parameters:
      file:
        type: string
        default: Dockerfile
      stage:
        type: string
      image_name:
        type: string
        default: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}-<< parameters.stage >>
      image_tag:
        type: string
        default: build-${CIRCLE_WORKFLOW_ID}
      build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Build and tag << parameters.stage >> stage
          command: docker build -f << parameters.file >> -t << parameters.image_name >>:<< parameters.image_tag >> --target=<< parameters.stage >> --build-arg << parameters.build_args >> --pull .

  # Prepare the machine for buildx based builds
  enable_buildx:
    description: "Prepare the CircleCI machine for cross-compiling ARM images"
    steps:
      - run:
          name: Setup binfmt_misc
          command: docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d
      - run:
          name: Switch to the multi-arch builder
          command: docker buildx create --use --name build-buildx

  # Build a stage for aarch64
  build_stage_buildx:
    description: "Build and tag a stage of a multi-stage Docker build for aarch64"
    parameters:
      file:
        type: string
        default: Dockerfile
      stage:
        type: string
      image_name:
        type: string
        default: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}-<< parameters.stage >>
      image_tag:
        type: string
        default: build-${CIRCLE_WORKFLOW_ID}
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: ""
      output_timeout:
        <<: *output_timeout_param
    steps:
      - run:
          name: Build and tag << parameters.stage >> stage
          command: docker buildx build --platform=<< parameters.platform >> --progress plain --load -f << parameters.file >> -t << parameters.image_name >>:<< parameters.image_tag >> --target=<< parameters.stage >> << parameters.build_args >> --pull .
          no_output_timeout: << parameters.output_timeout >>

  run_compose:
    description: "Launch docker-compose"
    parameters:
      file:
        type: string
        default: docker-compose.yml
      build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Launch docker-compose
          command: << parameters.build_args >> docker-compose -p atom -f << parameters.file >> up -d

  # Build and launch the docker-compose file
  build_and_launch:
    description: "Build and launch the docker-compose file"
    parameters:
      file:
        type: string
      service:
        type: string
      image_tag:
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_WORKFLOW_ID}
      build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Build Docker Compose File
          command: << parameters.build_args >> docker-compose -p atom -f << parameters.file >> build --pull
      - run:
          name: Tag built service
          command: docker tag atom_<< parameters.service >>:latest << parameters.image_tag >>
      - run:
          name: Launch Docker Compose File
          command: << parameters.build_args >> docker-compose -p atom -f << parameters.file >> up -d

  pull_image:
    description: "Pull image from registry"
    parameters:
      image_tag:
        type: string
    steps:
      - run:
          name: Pull Docker image
          command: docker pull << parameters.image_tag >>

  # Create and push image tag
  push_image:
    description: "Tag the latest docker image and deploy it"
    parameters:
      image_tag:
        description: Docker image to push
        type: string
      output_timeout:
        <<: *output_timeout_param
    steps:
      - run:
          name: Docker Push
          command: docker push << parameters.image_tag >>
          no_output_timeout: << parameters.output_timeout >>

  # Create and push image tag
  tag_and_deploy:
    description: "Tag the latest docker image and deploy it"
    parameters:
      source_image:
        description: Old image name including tag
        type: string
      target_image:
        description: New image name to push
        type: string
      target_tag:
        description: New tag to push
        type: string
      output_timeout:
        <<: *output_timeout_param
    steps:
      - run:
          name: Docker Tag
          command: docker tag << parameters.source_image >> << parameters.target_image >>:<< parameters.target_tag >>
      - run:
          name: Docker Push
          command: docker push << parameters.target_image >>:<< parameters.target_tag >>
          no_output_timeout: << parameters.output_timeout >>

  deploy_image:
    parameters:
      source_image:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      output_timeout:
        <<: *output_timeout_param
    steps:
      - docker_login
      - pull_image:
          image_tag: << parameters.source_image >>
      - tag_and_deploy:
          source_image: << parameters.source_image >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>
          output_timeout: << parameters.output_timeout >>

  push_dev_image:
    parameters:
      source_image:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      output_timeout:
        <<: *output_timeout_param
    steps:
      - deploy_image:
          source_image: << parameters.source_image >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>development-${CIRCLE_BUILD_NUM}
          output_timeout: << parameters.output_timeout >>

  push_master_image:
    parameters:
      source_image:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      output_timeout:
        <<: *output_timeout_param
    steps:
      - deploy_image:
          source_image: << parameters.source_image >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>master-${CIRCLE_BUILD_NUM}
          output_timeout: << parameters.output_timeout >>
      - deploy_image:
          source_image: << parameters.source_image >>
          target_image: << parameters.target_image >>
          target_tag: latest
          output_timeout: << parameters.output_timeout >>

  push_tag_image:
    parameters:
      source_image:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      output_timeout:
        <<: *output_timeout_param
    steps:
      - deploy_image:
          source_image: << parameters.source_image >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>${CIRCLE_TAG}
          output_timeout: << parameters.output_timeout >>


#
# Jobs that are nice to be able to share between elements
#
jobs:

  # Run flake8 format check
  check_flake8:
    docker:
      - image: elementaryrobotics/atom-flake8
    description: Check that code conforms with flake8 formatting
    parameters:
      version:
        description: Python version to run
        type: string
        default: 3.7.0
      exclude:
        description: Comma separated list of directories to exclude when running flake8
        type: string
        default: ""
      directory:
        description: Directory to run flake8 format check from
        type: string
        default: "."
    steps:
      - checkout
      - run:
          name: Create .flake8 config file
          command: |
            echo "[flake8]" > .flake8
            echo "exclude = << parameters.exclude >>" >> .flake8
            echo "max-line-length = 120" >> .flake8
            echo "max-doc-length = 80" >> .flake8
            echo "select = C,E,F,W,B" >> .flake8
            echo "ignore = E203,W503" >> .flake8
            cat .flake8
      - run:
          name: Run flake8 check
          command: |
            export LC_ALL=C.UTF-8 && export LANG=C.UTF-8
            flake8 << parameters.directory >>

  # Tag and deploy a development image
  deploy-dev:
    executor: build-classic
    parameters:
      output_timeout:
        <<: *output_timeout_param
    steps:
      - docker_login
      - pull_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
      - tag_and_deploy:
          source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
          target_tag: development-${CIRCLE_BUILD_NUM}
          output_timeout: << parameters.output_timeout >>

  # Tag and deploy a master image
  deploy-master:
    executor: build-classic
    parameters:
      output_timeout:
        <<: *output_timeout_param
    steps:
      - docker_login
      - pull_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
      - tag_and_deploy:
          source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
          target_tag: master-${CIRCLE_BUILD_NUM}
          output_timeout: << parameters.output_timeout >>
      - tag_and_deploy:
          source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
          target_tag: latest
          output_timeout: << parameters.output_timeout >>

  # Tag and deploy release image with GitHub tag
  deploy-tag:
    executor: build-classic
    parameters:
      output_timeout:
        <<: *output_timeout_param
    steps:
      - docker_login
      - pull_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
      - tag_and_deploy:
          source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}:build-${CIRCLE_WORKFLOW_ID}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
          target_tag: ${CIRCLE_TAG}
          output_timeout: << parameters.output_timeout >>

#
# Examples
#
examples:
  standard-build:

    description: General-purpose build, and deploy

    usage:
      version: 2.1

      orbs:
        atom: elementaryrobotics/atom@x.y.z

      jobs:
        build:
          executor: atom/build-classic
          environment:
            DOCKER_COMPOSE_SERVICE_NAME: some_service
          steps:
            - checkout
            - atom/docker_login
            - atom/build_and_launch:
                file: docker-compose.yml
                service: ${DOCKER_COMPOSE_SERVICE_NAME}
                image_tag: ${DOCKERHUB_REPO}-${CIRCLE_WORKFLOW_ID}
            - run:
                name: Unit Tests
                command: docker exec -it ${DOCKER_COMPOSE_SERVICE_NAME} $my_unit_test_command
            - atom/tag_and_deploy:
                source_image: ${DOCKERHUB_REPO}-${CIRCLE_WORKFLOW_ID}
                target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
                target_tag: build-${CIRCLE_WORKFLOW_ID}

      workflows:
        version: 2
        build-all:
          jobs:
            - build:
                filters:
                  tags:
                    only: /.*/
            - atom/check_flake8:
                requires:
                  - build
                version: 3.7.0
                exclude: doc,*third-party
                filters:
                  tags:
                    only: /.*/
            - atom/deploy-master:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    only:
                      - master
            - atom/deploy-tag:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    ignore:
                      - /.*/
                  tags:
                    only: /.*/
            - atom/deploy-dev:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    ignore:
                      - master
