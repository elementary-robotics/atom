#
# Atom CircleCI Orb
#

version: 2.1
description: Commands useful for building + deploying elements in the Atom system

#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:
  - &default_no_output_timeout
      description: Elapsed time command can run without output
      type: string  # decimal with unit suffix, such as “20m”, “1.25h”, “5s”
      default: 15m

#
# Machines that can be used for build. Build-classic is typically
# what you want to use.
#
executors:

  # Machine used to build docker containers using the
  # CircleCI classic image
  build-classic:
    machine:
      enabled: true
      image: circleci/classic:201808-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: medium

  # Ubuntu 16.04 machine used to build some images
  # comes with Docker 19.03.8 and docker-compose 1.25.5
  # This is useful since `buildx`, which is required in order
  # to cross-compile images, comes standard in Docker 19.03
  build-ubuntu:
    machine:
      enabled: true
      image: ubuntu-1604:202004-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: medium

  # Docker image for running flake8 jobs
  docker-flake8:
    docker:
      - image: elementaryrobotics/atom-flake8
    resource_class: small

  # Docker-in-docker. Need to call setup_remote_docker
  # before using. Useful when you don't need a bunch of
  # CPU and are just deploying things
  docker-in-docker:
    docker:
      - image: cimg/base:2020.01
    resource_class: small

#
# Commands that are useful for build and deploy
#
commands:

  # Install Git LFS
  install_git_lfs:
    description: Install Git Large File Storage (LFS) in ubuntu
    steps:
      - run:
          name: Download and install Git LFS
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install -f git-lfs && git lfs install
      - run:
          name: Authenticate Git LFS
          command: |
            mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            ssh git@github.com git-lfs-authenticate "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" download

  # Update submodules (parallelized)
  update_submodules:
    steps:
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive --jobs 8

  # Log into docker
  docker_login:
    description: "Logs into Dockerhub"
    steps:
      - run:
          name: Docker Login
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

  # Prepare the machine for buildx based builds
  enable_buildx:
    description: "Prepare the CircleCI machine for cross-compiling ARM images"
    steps:
      - run:
          name: Setup binfmt_misc
          command: cat /proc/sys/fs/binfmt_misc/qemu-aarch64 | grep enabled || docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d
      - run:
          name: Switch to the multi-arch builder
          command: docker buildx ls | grep "build-buildx" || docker buildx create --use --name build-buildx

  # Build and tag a Dockerfile without stages
  build_dockerfile:
    description: "Build and tag a Dockerfile"
    parameters:
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - run:
          name: Build Dockerfile << parameters.working_directory >>/<< parameters.file >> stage << parameters.stage >> and tag as << parameters.image_name >>:<< parameters.image_tag >>
          working_directory: << parameters.working_directory >>
          command: docker build -f << parameters.file >> -t << parameters.image_name >>:<< parameters.image_tag >> << parameters.build_args >> --pull .
          no_output_timeout: << parameters.no_output_timeout >>

  build_dockerfile_buildx:
    description: "Build and tag a Dockerfile using buildx"
    parameters:
      variant:
        type: string
        default: "stock"
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      cache_repo:
        type: string
      cache_tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - enable_buildx
      - run:
          name: Build Dockerfile << parameters.working_directory >>/<< parameters.file >> stage << parameters.stage >> with buildx and tag as << parameters.image_name >>:<< parameters.image_tag >>
          working_directory: << parameters.working_directory >>
          command: >
            docker buildx build
            --platform=linux/<< parameters.platform >>
            --progress plain
            --load
            -f << parameters.file >>
            -t << parameters.image_name >>:<< parameters.image_tag >>-<< parameters.variant >>-<< parameters.platform >>
            --target=<< parameters.stage >>
            << parameters.build_args >>
            --pull
            --cache-from=type=registry,ref=<< parameters.cache_repo >>:<< parameters.cache_tag >>-<< parameters.variant >>-<< parameters.platform >>
            --cache-to=type=registry,ref=<< parameters.cache_repo >>:<< parameters.cache_tag >>-<< parameters.variant >>-<< parameters.platform >>,mode=max
            .
          no_output_timeout: << parameters.no_output_timeout >>

  run_compose:
    description: "Launch docker-compose"
    parameters:
      file:
        type: string
        default: docker-compose.yml
      build_args:
        type: string
        default: ""
    steps:
      - run:
          name: Launch docker-compose
          command: << parameters.build_args >> docker-compose -p atom -f << parameters.file >> up -d

  pull_image:
    description: "Pull image from registry"
    parameters:
      image:
        type: string
      tag:
        type: string
    steps:
      - run:
          name: Pull Docker image
          command: docker pull << parameters.image >>:<< parameters.tag >>

  # Create and push image tag
  push_image:
    description: "Tag the latest docker image and deploy it"
    parameters:
      image:
        type: string
      tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - run:
          name: Docker Push
          command: docker push << parameters.image >>:<< parameters.tag >>
          no_output_timeout: << parameters.no_output_timeout >>

  # Create and push image tag
  tag_and_push_image:
    description: "Tag the latest docker image and deploy it"
    parameters:
      source_image:
        description: Old image name including tag
        type: string
      source_tag:
        description: Old image tag
        type: string
      target_image:
        description: New image name to push
        type: string
      target_tag:
        description: New tag to push
        type: string
      target_tag_cmd:
        description: grep-like modification command to be run on the target tag. Useful for when you need to use CircleCI's matrix params to launch a job with a tag that's close but not identical to the one you want to deploy.
        type: string
        default: "grep '.*'"
    steps:
      - run:
          name: Tag image
          command: docker tag << parameters.source_image >>:<< parameters.source_tag >> << parameters.target_image >>:$(echo << parameters.target_tag >> | << parameters.target_tag_cmd >>)
      - run:
          name: Push image
          command: docker push << parameters.target_image >>:$(echo << parameters.target_tag >> | << parameters.target_tag_cmd >>)

  deploy_image:
    parameters:
      source_image:
        type: string
      source_tag:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      target_tag_cmd:
        type: string
        default: grep ".*"
    steps:
      - docker_login
      - pull_image:
          image: << parameters.source_image >>
          tag: << parameters.source_tag >>
      - tag_and_push_image:
          source_image: << parameters.source_image >>
          source_tag: << parameters.source_tag >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>
          target_tag_cmd: << parameters.target_tag_cmd >>

  build_shared:
    parameters:
      variant:
        type: string
        default: "stock"
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - checkout
      - update_submodules
      - docker_login
      - build_dockerfile:
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>-<< parameters.variant >>-amd64
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          no_output_timeout: << parameters.no_output_timeout >>
      - push_image:
          image: << parameters.image_name >>
          tag: << parameters.image_tag >>-<< parameters.variant >>-amd64


  build_buildx_shared:
    parameters:
      variant:
        type: string
        default: stock
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      cache_repo:
        type: string
      cache_tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - checkout
      - update_submodules
      - docker_login
      - build_dockerfile_buildx:
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: << parameters.cache_tag >>
          no_output_timeout: << parameters.no_output_timeout >>
      - push_image:
          image: << parameters.image_name >>
          tag: << parameters.image_tag >>-<< parameters.variant >>-<< parameters.platform >>


#
# Jobs that are nice to be able to share between elements
#
jobs:

  # Run flake8 format check
  check_flake8:
    executor: docker-flake8
    description: Check that code conforms with flake8 formatting
    parameters:
      version:
        description: Python version to run
        type: string
        default: 3.7.0
      exclude:
        description: Comma separated list of directories to exclude when running flake8
        type: string
        default: ""
      directory:
        description: Directory to run flake8 format check from
        type: string
        default: "."
    steps:
      - checkout
      - run:
          name: Create .flake8 config file
          command: |
            echo "[flake8]" > .flake8
            echo "exclude = << parameters.exclude >>" >> .flake8
            echo "max-line-length = 120" >> .flake8
            echo "max-doc-length = 80" >> .flake8
            echo "select = C,E,F,W,B" >> .flake8
            echo "ignore = E203,W503" >> .flake8
            cat .flake8
      - run:
          name: Run flake8 check
          command: |
            export LC_ALL=C.UTF-8 && export LANG=C.UTF-8
            flake8 << parameters.directory >>

  build:
    executor: build-ubuntu
    parameters:
      variant:
        type: string
        default: "stock"
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          no_output_timeout: << parameters.no_output_timeout >>

  build_large:
    executor: build-ubuntu
    resource_class: large
    parameters:
      variant:
        type: string
        default: "stock"
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          no_output_timeout: << parameters.no_output_timeout >>

  build_xlarge:
    executor: build-ubuntu
    resource_class: xlarge
    parameters:
      variant:
        type: string
        default: "stock"
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          no_output_timeout: << parameters.no_output_timeout >>

  build_buildx:
    executor: build-ubuntu
    parameters:
      variant:
        type: string
        default: stock
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      cache_repo:
        type: string
      cache_tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_buildx_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: << parameters.cache_tag >>
          no_output_timeout: << parameters.no_output_timeout >>

  build_buildx_large:
    executor: build-ubuntu
    resource_class: large
    parameters:
      variant:
        type: string
        default: stock
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      cache_repo:
        type: string
      cache_tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_buildx_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: << parameters.cache_tag >>
          no_output_timeout: << parameters.no_output_timeout >>

  build_buildx_xlarge:
    executor: build-ubuntu
    resource_class: xlarge
    parameters:
      variant:
        type: string
        default: stock
      working_directory:
        type: string
        default: "."
      file:
        type: string
        default: Dockerfile
      image_name:
        type: string
      image_tag:
        type: string
      stage:
        type: string
        default: ""
      build_args:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      cache_repo:
        type: string
      cache_tag:
        type: string
      no_output_timeout:
        <<: *default_no_output_timeout
    steps:
      - build_buildx_shared:
          variant: << parameters.variant >>
          working_directory: << parameters.working_directory >>
          file: << parameters.file >>
          image_name: << parameters.image_name >>
          image_tag: << parameters.image_tag >>
          stage: << parameters.stage >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: << parameters.cache_tag >>
          no_output_timeout: << parameters.no_output_timeout >>

  # Run Tests
  test:
    executor: build-ubuntu
    parameters:
      platform:
        type: string
        default: amd64
      variant:
        type: string
        default: "stock"
      nucleus_repo:
        type: string
        default: elementaryrobotics/nucleus
      atom_version:
        type: string
      test_image:
        type: string
      test_tag:
        type: string
      compose_file:
        type: string
      compose_addl_args:
        type: string
        default: ""
      container_name:
        type: string
      container_test_dir:
        type: string
        default: "."
      test_cmd:
        type: string
    steps:
      - checkout
      - docker_login
      - run_compose:
          file: << parameters.compose_file >>
          build_args: << parameters.compose_addl_args >> "NUCLEUS_IMAGE=<< parameters.nucleus_repo >>:<< parameters.atom_version >>-stock-<< parameters.platform >> TEST_IMAGE=<< parameters.test_image >>:<< parameters.test_tag >>-<< parameters.variant >>-<< parameters.platform >>"
      - run:
          name: Run Tests
          command: docker exec -it -w << parameters.container_test_dir >> << parameters.container_name >> << parameters.test_cmd >>

  # Deploy an Image
  deploy:
    executor: docker-in-docker
    parameters:
      component:
        type: string
        default: ""
      variant:
        type: string
        default: "stock"
      source_image:
        type: string
      source_tag:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
      target_tag_cmd:
        type: string
        default: sed s/-stock//g | sed s/-amd64//g
      platform:
        type: string
        default: "amd64"
    steps:
      - setup_remote_docker
      - deploy_image:
          source_image: << parameters.source_image >>
          source_tag: << parameters.source_tag >>-<< parameters.variant >>-<< parameters.platform >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>-<< parameters.variant >>-<< parameters.platform >>
          target_tag_cmd: << parameters.target_tag_cmd >>

  # Special case: deploy to latest. Requires a different tag command
  deploy_latest:
    executor: docker-in-docker
    parameters:
      component:
        type: string
        default: ""
      variant:
        type: string
        default: "stock"
      source_image:
        type: string
      source_tag:
        type: string
      target_image:
        type: string
      target_tag:
        type: string
        default: ""
      target_tag_cmd:
        type: string
        default: grep -oP "(?<=-).*" | sed s/stock/latest/g | sed s/-amd64//g | sed s/latest-aarch64/aarch64/g
      platform:
        type: string
        default: "amd64"
    steps:
      - setup_remote_docker
      - deploy_image:
          source_image: << parameters.source_image >>
          source_tag: << parameters.source_tag >>-<< parameters.variant >>-<< parameters.platform >>
          target_image: << parameters.target_image >>
          target_tag: << parameters.target_tag >>-<< parameters.variant >>-<< parameters.platform >>
          target_tag_cmd: << parameters.target_tag_cmd >>

#
# Examples
#
examples:
  standard-build:

    description: General-purpose build, and deploy

    usage:
      version: 2.1

      orbs:
        atom: elementaryrobotics/atom@x.y.z

      jobs:
        build:
          executor: atom/build-classic
          environment:
            DOCKER_COMPOSE_SERVICE_NAME: some_service
          steps:
            - checkout
            - atom/docker_login
            - atom/build_and_launch:
                file: docker-compose.yml
                service: ${DOCKER_COMPOSE_SERVICE_NAME}
                image_tag: ${DOCKERHUB_REPO}-${CIRCLE_WORKFLOW_WORKSPACE_ID}
            - run:
                name: Unit Tests
                command: docker exec -it ${DOCKER_COMPOSE_SERVICE_NAME} $my_unit_test_command
            - atom/tag_and_push_image:
                source_image: ${DOCKERHUB_REPO}-${CIRCLE_WORKFLOW_WORKSPACE_ID}
                target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_REPO}
                target_tag: build-${CIRCLE_WORKFLOW_WORKSPACE_ID}

      workflows:
        version: 2
        build-all:
          jobs:
            - build:
                filters:
                  tags:
                    only: /.*/
            - atom/check_flake8:
                requires:
                  - build
                version: 3.7.0
                exclude: doc,*third-party
                filters:
                  tags:
                    only: /.*/
            - atom/deploy-master:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    only:
                      - master
            - atom/deploy-tag:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    ignore:
                      - /.*/
                  tags:
                    only: /.*/
            - atom/deploy-dev:
                requires:
                  - atom/check_flake8
                filters:
                  branches:
                    ignore:
                      - master
