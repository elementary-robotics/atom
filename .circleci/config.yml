# .circleci/config.yml

#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:
  - &atom_build_vars
      DOCKER_COMPOSE_PROJECT_NAME: atom
      DOCKER_COMPOSE_ATOM_SERVICE_NAME: atom
      DOCKER_COMPOSE_NUCLEUS_SERVICE_NAME: nucleus
      DOCKER_COMPOSE_ATOM_CONTAINER_NAME: dev_atom
      DOCKER_COMPOSE_NUCLEUS_CONTAINER_NAME: dev_nucleus
  - &atom_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: ""
  - &atom_aarch64_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-aarch64
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -aarch64-
  - &cuda_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-cuda
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -cuda-
  - &opengl_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-opngl
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -opengl
  - &opengl_cuda_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-opengl-cuda
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -cuda-opengl-
  - &nucleus_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
      target_tag: ""
  - &nucleus_aarch64_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}-aarch64
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
      target_tag: -aarch64-
  - &atom_base_image_names
      source_image:  ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-base
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -base-
  - &atom_aarch64_base_image_names
      source_image:  ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-base-aarch64
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      target_tag: -base-aarch64-
  - &docs_env
      DOCKER_COMPOSE_PROJECT_NAME: docs
      DOCKER_COMPOSE_SERVICE_NAME: docs
  - &docs_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}


#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@dev:296-multi-arch

commands:

  run_tests:
    parameters:
      container:
        type: string
    steps:
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.container >> pytest
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.container >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.container >> make test
      - run:
          name: C++ valgrind check
          command: docker exec -it -w /atom/languages/cpp << parameters.container >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
          environment:
            G_SLICE: always-malloc
            G_DEBUG: gc-friendly
      - run:
          name: C++ copy valgrind log
          command: docker cp << parameters.container >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

  heroku_deploy:
    parameters:
      image_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=${HEROKU_API_KEY} registry.heroku.com
            docker tag << parameters.image_tag >> registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a ${HEROKU_APP_NAME} web

  set_atom_version:
    steps:
      - run:
          name: Add atom version to config file
          command: |
            python3 languages/python/version.py

  build_shared_init:
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login
      - atom/enable_buildx

  test_atom_variant:
    parameters:
      compose:
        type: string
      nucleus:
        type: string
      atom:
        type: string
      container:
        type: string
    steps:

      # Launch containers for testing
      - atom/run_compose:
          file: << parameters.compose >>
          build_args: "NUCLEUS_IMAGE=<< parameters.nucleus >> ATOM_IMAGE=<< parameters.atom >>"
      # Run atom unit tests
      - run_tests:
          container: << parameters.container >>

  build_atom_with_nucleus_variant:
    parameters:
      tag:
        type: string
        default: ""
      platform:
        type: string
        default: linux/amd64
      build_args:
        type: string
        default: ""
    steps:

      # Build base, atom and test stages of atom image
      - atom/build_stage_buildx:
          stage: atom-base
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-base
          image_tag: build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
      - atom/build_stage_buildx:
          stage: atom
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
      - atom/build_stage_buildx:
          stage: nucleus
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
      - atom/build_stage_buildx:
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>

      # Tag and push atom build images
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>

      # Tag and push nucleus image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>

      # Run Tests
      - test_atom_variant:
          compose: .circleci/docker-compose-circle.yml
          nucleus: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          atom: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

  build_atom_variant:
    parameters:
      target:
        type: string
        default: atom
      tag:
        type: string
        default: ""
      platform:
        type: string
        default: linux/amd64
      build_args:
        type: string
        default: ""
    steps:

      # Build atom and test stages
      - atom/build_stage_buildx:
          stage: << parameters.target >>
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
      - atom/build_stage_buildx:
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>

      # Push build image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>

      # Run Tests
      - test_atom_variant:
          compose: .circleci/docker-compose-circle.yml
          nucleus: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}<< parameters.tag >>
          atom: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-test<< parameters.tag >>
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

  build_atom_base_variant:
    parameters:
      tag:
        type: string
        default: ""
      platform:
        type: string
        default: linux/amd64
      build_args:
        type: string
        default: ""
    steps:

      # Build atom and test stages
      - atom/build_stage_buildx:
          stage: base
          file: Dockerfile-base
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}-base<< parameters.tag >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>

      # Push build image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-base<< parameters.tag >>

      # Build the atom variant with the base
      - build_atom_with_nucleus_variant:
          tag: << parameters.tag >>
          platform: << parameters.platform >>
          build_args: "--build-arg BASE_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}-base<< parameters.tag >>"

jobs:
  build-atom:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_with_nucleus_variant:
          tag: ""
          platform: linux/amd64

  build-atom-aarch64:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_with_nucleus_variant:
          tag: "aarch64"
          platform: linux/aarch64

  build-cuda:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_variant:
          tag: "cuda"
          platform: linux/amd64
          build_args: "--build-arg BASE_IMAGE=nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04"

  build-opengl:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_variant:
          tag: "opengl"
          platform: linux/amd64
          build_args: "--build-arg BASE_IMAGE=nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04"

  build-opengl-cuda:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      BASE_IMAGE_TAG: v1.0.0
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_variant:
          tag: "opengl-cuda"
          platform: linux/amd64
          build_args: "--build-arg BASE_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-base:${BASE_IMAGE_TAG}"

  build-atom-base:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_base_variant:
          tag: ""
          platform: linux/amd64

  build-atom-aarch64-base:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - build_shared_init
      - build_atom_base_variant:
          tag: "aarch64"
          platform: linux/aarch64
          build_args: "--build-arg BLAS_TARGET_CPU=ARMV8 --build-arg PYARROW_EXTRA_CMAKE_ARGS=-DARROW_ARMV8_ARCH=armv8-a"

  deploy-dev:
    executor: atom/build-ubuntu
    resource_class: large
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_dev_image:
          <<: *atom_image_names
      - atom/push_dev_image:
          <<: *atom_aarch64_image_names
      - atom/push_dev_image:
          <<: *cuda_image_names
      - atom/push_dev_image:
          <<: *opengl_image_names
      - atom/push_dev_image:
          <<: *opengl_cuda_image_names
      - atom/push_dev_image:
          <<: *nucleus_image_names
      - atom/push_dev_image:
          <<: *nucleus_aarch64_image_names

  deploy-master:
    executor: atom/build-ubuntu
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_master_image:
          <<: *atom_image_names
      - atom/push_master_image:
          <<: *atom_aarch64_image_names
      - atom/push_master_image:
          <<: *cuda_image_names
      - atom/push_master_image:
          <<: *opengl_image_names
      - atom/push_master_image:
          <<: *opengl_cuda_image_names
      - atom/push_master_image:
          <<: *nucleus_image_names
      - atom/push_dev_image:
          <<: *nucleus_aarch64_image_names

  deploy-tag:
    executor: atom/build-ubuntu
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_tag_image:
          <<: *atom_image_names
      - atom/push_tag_image:
          <<: *atom_aarch64_image_names
      - atom/push_tag_image:
          <<: *cuda_image_names
      - atom/push_tag_image:
          <<: *opengl_image_names
      - atom/push_tag_image:
          <<: *opengl_cuda_image_names
      - atom/push_tag_image:
          <<: *nucleus_image_names
      - atom/push_tag_image:
          <<: *nucleus_aarch64_image_names

  deploy-atom-base:
    executor: atom/build-ubuntu
    environment:
      <<: *atom_build_vars
    steps:
      - atom/deploy_image:
          <<: *atom_base_image_names

  deploy-atom-aarch64-base:
    executor: atom/build-ubuntu
    environment:
      <<: *atom_build_vars
    steps:
      - atom/deploy_image:
          <<: *atom_aarch64_base_image_names

  build-docs:
    executor: atom/build-ubuntu
    environment:
      <<: *docs_env
    steps:
      - checkout

      # Need to log into docker
      - atom/docker_login

      #
      # Build docker image
      #
      - run:
          working_directory: doc
          name: Build docker
          command: docker-compose -f docker-compose-test.yml -p ${DOCKER_COMPOSE_PROJECT_NAME} build --pull
      - atom/tag_and_deploy:
          source_image: ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
          target_tag: build-${CIRCLE_WORKFLOW_ID}

  deploy-dev-docs:
    executor: atom/build-ubuntu
    environment:
      <<: *docs_env
    steps:
      - atom/push_dev_image:
          <<: *docs_image_names

  deploy-master-docs:
    executor: atom/build-ubuntu
    environment:
      <<: *docs_env
    steps:
      - atom/push_master_image:
          <<: *docs_image_names
      - heroku_deploy:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}

  deploy-tag-docs:
    executor: atom/build-ubuntu
    environment:
      <<: *docs_env
    steps:
      - atom/push_tag_image:
          <<: *docs_image_names
      - heroku_deploy:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:${CIRCLE_TAG}


workflows:
  version: 2
  commit:
    jobs:
      # Build the main/vanilla variant of atom
      - build-atom:
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/
      - build-docs:
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*-build-base/
      - atom/check_flake8:
          version: 3.7.0
          exclude: demo,doc,examples,utilities,*third-party,languages
          requires:
            - build-atom
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/

      # Build special images after tests pass for atom
      - build-opengl:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/
      - build-cuda:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/
      - build-opengl-cuda:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/
      - build-atom-aarch64:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base/

      # Deploy all images after all tests pass
      - deploy-master:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
            - build-atom-aarch64
          filters:
            branches:
              only:
                - master
      - deploy-tag:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
            - build-atom-aarch64
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - deploy-dev:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
            - build-atom-aarch64
          filters:
            branches:
              ignore:
                - master

      # Deploy docs
      - deploy-master-docs:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - deploy-tag-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - deploy-dev-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master

      # Build base images
      - build-atom-base:
          filters:
            branches:
              only: /.*-build-base/
      - build-atom-aarch64-base:
          filters:
            branches:
              only: /.*-build-base/

      - deploy-atom-base:
          requires:
            - build-atom-base
          filters:
            branches:
              only: /.*-build-base/

      - deploy-atom-aarch64-base:
          requires:
            - build-atom-aarch64-base
          filters:
            branches:
              only: /.*-build-base/


  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-docs
      - deploy-dev-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master
