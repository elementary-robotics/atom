# .circleci/config.yml

#
# Parameters that can be set/changed for the build
#
parameters:

  # Atom parameters
  atom_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
  nucleus_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
  cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_CACHE_REPO}
  dockerhub_user:
    type: string
    default: ${DOCKERHUB_USER}
  dockerhub_password:
    type: string
    default: ${DOCKEHUB_PASSWORD}

  # Docs parameters
  docs_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  docs_cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  heroku_api_key:
    type: string
    default: ${HEROKU_API_KEY}
  heroku_app_name:
    type: string
    default: ${HEROKU_APP_NAME}


#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:

  # Atom Build Matrix
  - &atom_matrix
      parameters:
        variant: ["stock", "opengl", "cuda", "opengl-cuda"]
        platform: ["amd64", "aarch64"]
      exclude:
        - variant: "opengl"
          platform: "aarch64"
        - variant: "cuda"
          platform: "aarch64"
        - variant: "opengl-cuda"
          platform: "aarch64"

  # Nucleus Build Matrix
  - &nucleus_matrix
      parameters:
        variant: ["stock"]
        platform: ["amd64", "aarch64"]

  # Base Build Matrix
  - &base_matrix
      parameters:
        variant: ["stock", "opengl", "cuda"]
        platform: ["amd64", "aarch64"]
      exclude:
        - variant: "opengl"
          platform: "aarch64"
        - variant: "cuda"
          platform: "aarch64"

  - &base_build_atom_tag "base-3050"
  - &base_build_atom_opengl_tag "base-opengl-3051"
  - &base_build_atom_cuda_tag "base-cuda-3052"
  - &base_build_atom_aarch64_tag "base-aarch64-3048"
  - &base_build_tags
      source_tag:
        - *base_build_atom_tag
        - *base_build_atom_opengl_tag
        - *base_build_atom_cuda_tag
        - *base_build_atom_aarch64_tag

#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@dev:311-orb-reorg

commands:

  run_tests:
    parameters:
      container:
        type: string
      test_valgrind:
        type: boolean
        default: true
    steps:
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.container >> pytest
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.container >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.container >> make test
      - when:
          condition: << parameters.test_valgrind >>
          steps:
            - run:
                name: C++ valgrind check
                command: docker exec -it -w /atom/languages/cpp << parameters.container >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
                environment:
                  G_SLICE: always-malloc
                  G_DEBUG: gc-friendly
            - run:
                name: C++ copy valgrind log
                command: docker cp << parameters.container >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

  heroku_deploy:
    parameters:
      source_image:
        type: string
      source_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=<< pipeline.parameters.heroku_api_key >> registry.heroku.com
            docker tag << parameters.source_image >>:<< parameters.source_tag >> registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a << pipeline.parameters.heroku_app_name >> web

  set_atom_version:
    steps:
      - run:
          name: Add atom version to config file
          command: |
            python3 languages/python/version.py

  build_shared_init:
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

  test_atom_variant:
    parameters:
      compose:
        type: string
      nucleus:
        type: string
      atom:
        type: string
      container:
        type: string
      test_valgrind:
        type: boolean
        default: true
    steps:

      # Launch containers for testing
      - atom/run_compose:
          file: << parameters.compose >>
          build_args: "NUCLEUS_IMAGE=<< parameters.nucleus >> ATOM_IMAGE=<< parameters.atom >>"
      # Run atom unit tests
      - run_tests:
          container: << parameters.container >>
          test_valgrind: << parameters.test_valgrind >>

  build_atom_with_nucleus_variant:
    parameters:
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      build_args:
        type: string
        default: ""
      test_valgrind:
        type: boolean
        default: true
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
    steps:

      # Build base, atom and test stages of atom image
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: atom-source
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>-source
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: atom
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: nucleus
          image_name: << pipeline.parameters.nucleus_repo >>
          image_tag: build-<< pipeline.number >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: test
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>-test
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom

      # Tag and push atom build images
      - atom/push_image:
          image: << pipeline.parameters.atom_repo >>
          tag: build-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>
      - atom/push_image:
          image: << pipeline.parameters.atom_repo >>
          tag: build-<< pipeline.number >>-test-<< parameters.variant >>-<< parameters.platform >>

      # Tag and push nucleus image
      - atom/push_image:
          image: << pipeline.parameters.nucleus_repo >>
          tag: build-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>

      # Run Tests
      - test_atom_variant:
          compose: .circleci/docker-compose-circle.yml
          nucleus: << pipeline.parameters.nucleus_repo >>:build-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>
          atom: << pipeline.parameters.atom_repo >>:build-<< pipeline.number >>-test-<< parameters.variant >>-<< parameters.platform >>
          container: test_atom
          test_valgrind: << parameters.test_valgrind >>

  build_atom_variant:
    parameters:
      target:
        type: string
        default: atom
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      build_args:
        type: string
        default: ""
      test_valgrind:
        type: boolean
        default: true
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
    steps:

      # Build atom and test stages
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: << parameters.target >>
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: test
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>-test
          build_args: << parameters.build_args >>
          platform: << parameters.platform >>
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-atom

      # Push build image
      - atom/push_image:
          image: << pipeline.parameters.atom_repo >>
          tag: build-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>
      - atom/push_image:
          image: << pipeline.parameters.atom_repo >>
          tag: build-<< pipeline.number >>-test-<< parameters.variant >>-<< parameters.platform >>

      # Run Tests
      - test_atom_variant:
          compose: .circleci/docker-compose-circle.yml
          nucleus: << pipeline.parameters.nucleus_repo >>:build-<< pipeline.number >>-stock-<< parameters.platform >>
          atom: << pipeline.parameters.atom_repo >>:build-<< pipeline.number >>-test-<< parameters.variant >>-<< parameters.platform >>
          container: test_atom
          test_valgrind: << parameters.test_valgrind >>

  build_atom_base_variant:
    parameters:
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      build_args:
        type: string
        default: ""
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true
    steps:

      # Build atom and test stages
      - atom/build_dockerfile_buildx:
          variant: << parameters.variant >>
          stage: base
          file: Dockerfile-base
          image_name: << pipeline.parameters.atom_repo >>
          image_tag: build-<< pipeline.number >>-base
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          no_output_timeout: 3h
          cache_repo: << parameters.cache_repo >>
          cache_tag: cache-base

      # Push build image
      - atom/push_image:
          image: << pipeline.parameters.atom_repo >>
          tag: build-<< pipeline.number >>-base-<< parameters.variant >>-<< parameters.platform >>

      # Build the atom variant with the base
      - build_atom_with_nucleus_variant:
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          build_args: "--build-arg BASE_IMAGE=<< pipeline.parameters.atom_repo >>:build-<< pipeline.number >>-base-<< parameters.variant >>-<< parameters.platform >>"
          test_valgrind: << parameters.test_valgrind >>

jobs:

  build-atom-with-nucleus:
    parameters:
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: "amd64"
      base_repo:
        type: string
        default: << pipeline.parameters.atom_repo >>
      base_tag:
        type: string
      build_args:
        type: string
        default: ""
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_with_nucleus_variant:
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          build_args: --build-arg BASE_IMAGE=<< parameters.base_repo >>:<< parameters.base_tag >> << parameters.build_args >>
          test_valgrind: << parameters.test_valgrind >>
          cache_repo: << parameters.cache_repo >>

  build-atom:
    parameters:
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: "amd64"
      base_repo:
        type: string
        default: << pipeline.parameters.atom_repo >>
      base_tag:
        type: string
      build_args:
        type: string
        default: ""
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_variant:
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          build_args: --build-arg BASE_IMAGE=<< parameters.base_repo >>:<< parameters.base_tag >> << parameters.build_args >>
          test_valgrind: << parameters.test_valgrind >>
          cache_repo: << parameters.cache_repo >>

  build-base:
    parameters:
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: "amd64"
      build_args:
        type: string
        default: ""
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_base_variant:
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          build_args: << parameters.build_args >>
          cache_repo: << parameters.cache_repo >>
          test_valgrind: << parameters.test_valgrind >>

  build-docs:
    executor: atom/build-ubuntu
    resource_class: medium
    steps:
      - checkout

      #
      # Build docker image
      #
      - atom/build_dockerfile_buildx:
          working_directory: doc
          stage: docs
          file: Dockerfile
          image_name: << pipeline.parameters.docs_repo >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.docs_cache_repo >>
          cache_tag: cache-docs

      # Push build image
      - atom/push_image:
          image: << pipeline.parameters.docs_repo >>
          tag: build-<< pipeline.number >>

  deploy-docs-heroku:
    executor: atom/build-ubuntu
    resource_class: medium
    steps:
      - heroku_deploy:
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>

workflows:
  version: 2

  #
  # Build and deploy atom
  #
  atom-build:
    jobs:


      #
      # Build + test stock atom
      #
      - build-atom-with-nucleus:
          name: "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_tag
          build_args: "--build-arg PRODUCTION_IMAGE=debian:buster-slim"
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # Run the style check on atom
      - atom/check_flake8:
          version: 3.7.0
          exclude: demo,doc,examples,utilities,*third-party,languages
          requires:
            - build-atom-stock-amd64
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      #
      # Build variants of atom:
      #   - opengl
      #   - opengl-cuda
      #   - cuda
      #   - aarch64
      #
      - build-atom:
          name: "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ opengl ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_opengl_tag
          build_args: "--build-arg PRODUCTION_IMAGE=nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04"
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      - build-atom:
          name: "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ cuda ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_cuda_tag
          build_args: "--build-arg PRODUCTION_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04"
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      - build-atom:
          name: "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ opengl-cuda ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_cuda_tag
          build_args: "--build-arg PRODUCTION_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04 --build-arg INSTALL_OPENGL=y"
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      - build-atom-with-nucleus:
          name: "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ aarch64 ]
          base_tag: *base_build_atom_aarch64_tag
          build_args: "--build-arg PRODUCTION_IMAGE=debian:buster-slim"
          test_valgrind: false
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      #
      # Development branches: deploy to development-YYY-tag
      #
      - atom/deploy:
          name: "deploy-dev-atom-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.atom_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.atom_repo >>
          target_tag: development-<< pipeline.number >>
          matrix:
            << : *atom_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - master
      - atom/deploy:
          name: "deploy-dev-nucleus-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.nucleus_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.nucleus_repo >>
          target_tag: development-<< pipeline.number >>
          matrix:
            << : *nucleus_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - master

      #
      # Master branches: deploy to master-YYY-tag and latest/tag
      #
      - atom/deploy:
          name: "deploy-master-atom-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.atom_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.atom_repo >>
          target_tag: master-<< pipeline.number >>
          matrix:
            << : *atom_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              only:
                - master
      - atom/deploy_latest:
          name: "deploy-latest-atom-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.atom_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.atom_repo >>
          matrix:
            << : *atom_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              only:
                - master

      - atom/deploy:
          name: "deploy-master-nucleus-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.nucleus_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.nucleus_repo >>
          target_tag: master-<< pipeline.number >>
          matrix:
            << : *nucleus_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              only:
                - master
      - atom/deploy_latest:
          name: "deploy-latest-nucleus-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.nucleus_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.nucleus_repo >>
          matrix:
            << : *atom_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              only:
                - master

      #
      # Release builds -- deploy to release-tag
      #
      - atom/deploy:
          name: "deploy-tag-atom-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.atom_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.atom_repo >>
          target_tag: ${CIRCLE_TAG}
          matrix:
            << : *atom_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - atom/deploy:
          name: "deploy-tag-nucleus-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.nucleus_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.nucleus_repo >>
          target_tag: ${CIRCLE_TAG}
          matrix:
            << : *nucleus_matrix
          requires:
            - "build-atom-<< matrix.variant >>-<< matrix.platform >>"
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
  #
  # Build and deploy the docs
  #
  docs-build:
    jobs:

      # Build the docs themselves
      - atom/build_buildx:
          name: "build-docs"
          working_directory: doc
          file: Dockerfile
          image_name: << pipeline.parameters.docs_repo >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.docs_cache_repo >>
          cache_tag: cache-docs
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # Builds of dev branches, deploy development-X
      - atom/deploy:
          name: "deploy-docs-dev"
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: development-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master

      # Builds of master branches. Deploy latest, master-Y and Heroku
      - atom/deploy:
          name: "deploy-docs-master-latest"
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: latest
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - atom/deploy:
          name: "deploy-docs-master-num"
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: master-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - deploy-docs-heroku:
          name: "deploy-docs-master-heroku"
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master

      # Builds of tag branches, deploy tag
      - atom/deploy:
          name: "deploy-docs-tag"
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: ${CIRCLE_TAG}
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build and deploy base images
  #
  base-build:
    jobs:

      # Build base images
      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ amd64 ]
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-atom/

      - build-base:
          resource_class: xlarge
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ aarch64 ]
          build_args: "--build-arg BLAS_TARGET_CPU=ARMV8 --build-arg PYARROW_EXTRA_CMAKE_ARGS=-DARROW_ARMV8_ARCH=armv8-a"
          test_valgrind: false
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-aarch64/

      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ opengl ]
              platform: [ amd64 ]
          build_args: "--build-arg BASE_IMAGE=nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04"
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-opengl/

      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ cuda ]
              platform: [ amd64 ]
          build_args: "--build-arg BASE_IMAGE=nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04"
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-cuda/

      # Deploy base images. Don't need branch filters since they depend
      # on base builds with the branch filters
      - atom/deploy:
          name: "deploy-base-dev-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.atom_repo >>
          source_tag: build-<< pipeline.number >>-base
          target_image: << pipeline.parameters.atom_repo >>
          target_tag: development-<< pipeline.number >>
          matrix:
            << : *base_matrix
          requires:
            - "build-base-<< matrix.variant >>-<< matrix.platform >>"

      # Bump the base tags when merging into master
      - atom/deploy:
          name: "deploy-base-master-<< matrix.source_tag >>"
          source_image: << pipeline.parameters.atom_repo >>
          target_image: << pipeline.parameters.atom_repo >>
          target_tag: << matrix.source_tag >>
          target_tag_cmd: sed s/-stock//g | sed s/-amd64//g | grep -oP '[\-a-z0-9]+(?=-[0-9]+)'
          matrix:
            parameters:
              << : *base_build_tags
          filters:
            branches:
              only:
                - master


  #
  # Nightly rebuild/redeploy of docs sites
  #
  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - atom/build_buildx:
          name: "build-docs-nightly"
          working_directory: doc
          file: Dockerfile
          image_name: << pipeline.parameters.docs_repo >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.docs_cache_repo >>
          cache_tag: cache-docs


      - atom/deploy:
          name: "deploy-docs-nightly"
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: development-<< pipeline.number >>
          requires:
            - "build-docs-nightly"
          filters:
            branches:
              ignore:
                - master
