# .circleci/config.yml

#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:
  - &atom_build_vars
      DOCKER_COMPOSE_PROJECT_NAME: atom
      DOCKER_COMPOSE_ATOM_SERVICE_NAME: atom
      DOCKER_COMPOSE_NUCLEUS_SERVICE_NAME: nucleus
      DOCKER_COMPOSE_ATOM_CONTAINER_NAME: dev_atom
      DOCKER_COMPOSE_NUCLEUS_CONTAINER_NAME: dev_nucleus
  - &atom_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
  - &cuda_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}
  - &opengl_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}
  - &opengl_cuda_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
  - &nucleus_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
  - &docs_env
      DOCKER_COMPOSE_PROJECT_NAME: docs
      DOCKER_COMPOSE_SERVICE_NAME: docs
  - &docs_image_names
      source_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:build-${CIRCLE_WORKFLOW_ID}
      target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}


#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@dev:fix_tag_build_flake8

jobs:
  build-atom:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

      # Build base, prod and test stages of atom image
      - atom/build_stage:
          file: Dockerfile-atom
          stage: base
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-base
          image_tag: build-${CIRCLE_WORKFLOW_ID}
      - atom/build_stage:
          file: Dockerfile-atom
          stage: prod
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}
      - atom/build_stage:
          file: Dockerfile-atom
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-test
          image_tag: build-${CIRCLE_WORKFLOW_ID}

      # Tag and push atom build images
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}:build-${CIRCLE_WORKFLOW_ID}
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-test:build-${CIRCLE_WORKFLOW_ID}

  build-nucleus:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars

    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

      # Build all stages of nucleus image
      - atom/build_stage:
          file: Dockerfile-nucleus
          stage: base
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}-base
          image_tag: build-${CIRCLE_WORKFLOW_ID}
      - atom/build_stage:
          file: Dockerfile-nucleus
          stage: prod
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}

      # Tag and push nucleus prod image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID}

  test-atom:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars

    steps:
      - checkout
      - atom/docker_login

      # Launch containers for testing
      - atom/run_compose:
          file: .circleci/docker-compose-circle.yml
          build_args: "NUCLEUS_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID} ATOM_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}-test:build-${CIRCLE_WORKFLOW_ID}"

      # Run atom unit tests
      - run_tests:
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

  build-cuda:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

      # Build prod and test stages
      - atom/build_stage:
          file: Dockerfile-atom
          stage: prod
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04"
      - atom/build_stage:
          file: Dockerfile-atom
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}-test
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04"

      # Launch containers for testing
      - atom/run_compose:
          file: .circleci/docker-compose-circle.yml
          build_args: "NUCLEUS_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID} ATOM_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}-test:build-${CIRCLE_WORKFLOW_ID}"

      # Run atom unit tests
      - run_tests:
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

      # Push build image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}:build-${CIRCLE_WORKFLOW_ID}

  build-opengl:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

      # Build graphics and test stages
      - atom/build_stage:
          file: Dockerfile-atom
          stage: graphics
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04"
      - atom/build_stage:
          file: Dockerfile-atom
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}-test
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04"

      # Launch containers for testing
      - atom/run_compose:
          file: .circleci/docker-compose-circle.yml
          build_args: "NUCLEUS_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID} ATOM_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}-test:build-${CIRCLE_WORKFLOW_ID}"

      # Run atom unit tests
      - run_tests:
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

      # Push build image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}:build-${CIRCLE_WORKFLOW_ID}

  build-opengl-cuda:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars
      BASE_IMAGE_TAG: v1.0.0
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

      # Build base image
      - atom/pull_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}-base:${BASE_IMAGE_TAG}

      # Build graphics and test stages
      - atom/build_stage:
          file: Dockerfile-atom
          stage: graphics
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}-base:${BASE_IMAGE_TAG}"
      - atom/build_stage:
          file: Dockerfile-atom
          stage: test
          image_name: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}-test
          image_tag: build-${CIRCLE_WORKFLOW_ID}
          build_args: "BASE_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}-base:${BASE_IMAGE_TAG}"

      # Launch containers for testing
      - atom/run_compose:
          file: .circleci/docker-compose-circle.yml
          build_args: "NUCLEUS_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}:build-${CIRCLE_WORKFLOW_ID} ATOM_IMAGE=${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}-test:build-${CIRCLE_WORKFLOW_ID}"

      # Run atom unit tests
      - run_tests:
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

      # Push build image
      - atom/push_image:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}:build-${CIRCLE_WORKFLOW_ID}

  deploy-dev:
    executor: atom/build-classic
    resource_class: large
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_dev_image:
          <<: *atom_image_names
      - atom/push_dev_image:
          <<: *cuda_image_names
      - atom/push_dev_image:
          <<: *opengl_image_names
      - atom/push_dev_image:
          <<: *opengl_cuda_image_names
      - atom/push_dev_image:
          <<: *nucleus_image_names

  deploy-master:
    executor: atom/build-classic
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_master_image:
          <<: *atom_image_names
      - atom/push_master_image:
          <<: *cuda_image_names
      - atom/push_master_image:
          <<: *opengl_image_names
      - atom/push_master_image:
          <<: *opengl_cuda_image_names
      - atom/push_master_image:
          <<: *nucleus_image_names

  deploy-tag:
    executor: atom/build-classic
    environment:
      <<: *atom_build_vars
    steps:
      - atom/push_tag_image:
          <<: *atom_image_names
      - atom/push_tag_image:
          <<: *cuda_image_names
      - atom/push_tag_image:
          <<: *opengl_image_names
      - atom/push_tag_image:
          <<: *opengl_cuda_image_names
      - atom/push_tag_image:
          <<: *nucleus_image_names

  build-docs:
    executor: atom/build-classic
    environment:
      <<: *docs_env
    steps:
      - checkout

      # Need to log into docker
      - atom/docker_login

      #
      # Build docker image
      #
      - run:
          working_directory: doc
          name: Build docker
          command: docker-compose -f docker-compose-test.yml -p ${DOCKER_COMPOSE_PROJECT_NAME} build --pull
      - atom/tag_and_deploy:
          source_image: ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
          target_tag: build-${CIRCLE_WORKFLOW_ID}

  deploy-dev-docs:
    executor: atom/build-classic
    environment:
      <<: *docs_env
    steps:
      - atom/push_dev_image:
          <<: *docs_image_names

  deploy-master-docs:
    executor: atom/build-classic
    environment:
      <<: *docs_env
    steps:
      - atom/push_master_image:
          <<: *docs_image_names
      - heroku_deploy:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}

  deploy-tag-docs:
    executor: atom/build-classic
    environment:
      <<: *docs_env
    steps:
      - atom/push_tag_image:
          <<: *docs_image_names
      - heroku_deploy:
          image_tag: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:${CIRCLE_TAG}


commands:

  run_tests:
    parameters:
      container:
        type: string
    steps:
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.container >> pytest
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.container >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.container >> make test
      - run:
          name: C++ valgrind check
          command: docker exec -it -w /atom/languages/cpp << parameters.container >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
          environment:
            G_SLICE: always-malloc
            G_DEBUG: gc-friendly
      - run:
          name: C++ copy valgrind log
          command: docker cp << parameters.container >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

  heroku_deploy:
    parameters:
      image_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=${HEROKU_API_KEY} registry.heroku.com
            docker tag << parameters.image_tag >> registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a ${HEROKU_APP_NAME} web

  set_atom_version:
    steps:
      - run:
          name: Add atom version to config file
          command: |
            pyenv global 3.7.0 && python3 languages/python/version.py


workflows:
  version: 2
  commit:
    jobs:
      - build-atom:
          filters:
            tags:
              only: /.*/
      - build-nucleus:
          filters:
            tags:
              only: /.*/
      - build-docs:
          filters:
            tags:
              only: /.*/
      - test-atom:
          requires:
            - build-atom
            - build-nucleus
          filters:
            tags:
              only: /.*/
      - atom/check_flake8:
          version: 3.7.0
          exclude: demo,doc,examples,utilities,*third-party,languages
          requires:
            - test-atom
          filters:
            tags:
              only: /.*/

      # Build special images after tests pass for atom
      - build-opengl:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only: /.*/
      - build-cuda:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only: /.*/
      - build-opengl-cuda:
          requires:
            - atom/check_flake8
          filters:
            tags:
              only: /.*/

      # Deploy all images after all tests pass
      - deploy-master:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
          filters:
            branches:
              only:
                - master
      - deploy-tag:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - deploy-dev:
          requires:
            - build-opengl
            - build-cuda
            - build-opengl-cuda
          filters:
            branches:
              ignore:
                - master

      # Deploy docs
      - deploy-master-docs:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - deploy-tag-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - deploy-dev-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master

  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-docs
      - deploy-dev-docs:
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master
