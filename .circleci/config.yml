version: 2

orbs:
  atom: elementaryrobotics/atom@0.0.1

jobs:
  build:

    # VM we're going to use to build the docker container
    executor: atom/build-classic

    # Variables that are easier to set up here to propagate through
    # the build script
    environment:

      # Name of the service in docker-compose.yml
      DOCKER_COMPOSE_ATOM_SERVICE_NAME: atom
      DOCKER_COMPOSE_NUCLEUS_SERVICE_NAME: nucleus
      DOCKER_COMPOSE_ATOM_CONTAINER_NAME: dev_atom
      DOCKER_COMPOSE_NUCLEUS_CONTAINER_NAME: dev_nucleus

    steps:
      - checkout

      # Need to log into docker
      - atom/docker_login

      # Need to update submodules
      - run:
          name: Update Submodules
          command: git submodule update --init --recursive

      # Build, launch, and save docker image
      - atom/build_and_launch:
          file: docker-compose.yml
          service: ${DOCKER_COMPOSE_ATOM_SERVICE_NAME}

      - atom/store_image:
          name: ${DOCKERHUB_ATOM_REPO}

      - run_tests
          container: ${DOCKER_COMPOSE_ATOM_CONTAINER_NAME}

  cuda:
    executor: atom/build-classic

    steps:
      - run:
          name: Build for cuda / cuDNN
          command: docker build -f Dockerfile-atom --build-arg BASE_IMAGE=atom-cuda-10-base -t ${DOCKERHUB_ATOM_CUDA_10_REPO} .

      # TODO:
      # convert to build and launch command from orb
      #   - add parameter for build-arg
      #   - orb command uses docker-compose -- need that for running tests as well
      # add tests command

      - atom/store_image:
          image_filename: ${DOCKERHUB_ATOM_CUDA_10_REPO}
      - run_tests:
          container:

  opengl:
    executor: atom/build-classic

    environment:
      BASE_IMAGE
      DOCKER_COMPOSE_ATOM_SERVICE_NAME:

    steps:
      - run:
          name: Build for OpenGL
          command: docker build -f Dockerfile-atom --build-arg BASE_IMAGE=atom-opengl-base -t ${DOCKERHUB_ATOM_OPENGL_REPO} .

      # TODO:
      # convert to build and launch command from orb
      # add tests command
      # tag and deploy

      - atom/store_image:
          name: ${DOCKERHUB_ATOM_OPENGL_REPO}
      - run_tests:
          container:

  opengl-cuda:
    executor: atom/build-classic

    steps:
      - run:
          name: Build for OpenGL + cuda / cuDNN
          command: docker build -f Dockerfile-atom --build-arg BASE_IMAGE=atom-opengl-cuda-10-base -t ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO} .

      # TODO:
      # convert to build and launch command from orb
      # add tests command

      - atom/store_image:
          name: ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
      - run_tests:
          container:

  deploy-dev:
    executor: build-classic
    steps:
      - atom/push_dev_image:
          image_filename: ${DOCKERHUB_ATOM_REPO}
          source_image: ${DOCKERHUB_ATOM_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      - atom/push_dev_image:
          image_filename: ${DOCKERHUB_ATOM_CUDA_10_REPO}
          source_image: ${DOCKERHUB_ATOM_CUDA_10_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}
      - atom/push_dev_image:
          image_filename: ${DOCKERHUB_ATOM_OPENGL_REPO}
          source_image: ${DOCKERHUB_ATOM_OPENGL_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}
      - atom/push_dev_image:
          image_filename: ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
          source_image: ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
      - atom/push_dev_image:
          image_filename: ${DOCKERHUB_NUCLEUS_REPO}
          source_image: ${DOCKERHUB_NUCLEUS_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}

  deploy-master:
    executor: build-classic
    steps:
      - atom/push_master_image:
          image_filename: ${DOCKERHUB_ATOM_REPO}
          source_image: ${DOCKERHUB_ATOM_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_REPO}
      - atom/push_master_image:
          image_filename: ${DOCKERHUB_ATOM_CUDA_10_REPO}
          source_image: ${DOCKERHUB_ATOM_CUDA_10_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_CUDA_10_REPO}
      - atom/push_master_image:
          image_filename: ${DOCKERHUB_ATOM_OPENGL_REPO}
          source_image: ${DOCKERHUB_ATOM_OPENGL_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_REPO}
      - atom/push_master_image:
          image_filename: ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
          source_image: ${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_ATOM_OPENGL_CUDA_10_REPO}
      - atom/push_master_image:
          image_filename: ${DOCKERHUB_NUCLEUS_REPO}
          source_image: ${DOCKERHUB_NUCLEUS_REPO}
          target_image: ${DOCKERHUB_ORG}/${DOCKERHUB_NUCLEUS_REPO}

  deploy-tag:
    executor: build-classic
    steps:
      - atom/push_tag_image:
          image_filename: atom
      - atom/push_tag_image:
          image_filename: cuda
      - atom/push_tag_image:
          image_filename: opengl
      - atom/push_tag_image:
          image_filename: opengl-cuda

  docs:

    # VM we're going to use to build the docker container
    executor: atom/build-classic

    # Variables that are easier to set up here to propagate through
    # the build script
    environment:

      # Name of the service in docker-compose.yml
      DOCKER_COMPOSE_PROJECT_NAME: docs
      DOCKER_COMPOSE_SERVICE_NAME: docs

    steps:
      - checkout

      # Need to log into docker
      - run:
          name: Docker login
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

      #
      # Build docker image
      #
      - run:
          working_directory: doc
          name: Build docker
          command: docker-compose -f docker-compose-test.yml -p ${DOCKER_COMPOSE_PROJECT_NAME} build --pull

      #
      # Push the image back to DockerHub, either under a "development" tag
      # or under a master tag
      #
      - run:
          name: Docker Tag and Push
          working_directory: doc
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then

              # Tag and push
              docker tag ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME} ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:master-${CIRCLE_BUILD_NUM}
              docker tag ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME} ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:latest
              docker push ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:master-${CIRCLE_BUILD_NUM}
              docker push ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:latest

              # Tag and push to heroku
              docker login --username=_ --password=${HEROKU_API_KEY} registry.heroku.com
              docker tag ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME} registry.heroku.com/${HEROKU_APP_NAME}/web
              docker push registry.heroku.com/${HEROKU_APP_NAME}/web
              heroku container:release -a ${HEROKU_APP_NAME} web

            else

              # Tag and push to dockerhub
              docker tag ${DOCKER_COMPOSE_PROJECT_NAME}_${DOCKER_COMPOSE_SERVICE_NAME} ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:development-${CIRCLE_BUILD_NUM}
              docker push ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}:development-${CIRCLE_BUILD_NUM}
            fi


commands:

  run_tests:
    parameters:
      container:
        type: string
    steps:
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python << parameters.container >> pytest
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.container >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.container >> make test
      - run:
          name: C++ valgrind check
          command: docker exec -it -w /atom/languages/cpp << parameters.container >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
          environment:
            G_SLICE: always-malloc
            G_DEBUG: gc-friendly
      - run:
          name: C++ copy valgrind log
          command: docker cp << parameters.container >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log


workflows:
  version: 2
  commit:
    jobs:
      - build
      - docs

      # Build special images after tests pass for atom
      - opengl:
          requires:
            - build
      - cuda:
          requires:
            - build
      - opengl-cuda:
          requires:
            - build

      # Deploy all images after all tests pass
      - deploy-master:
          requires:
            - build
            - opengl
            - cuda
            - opengl-cuda
          filters:
            branches:
              only:
                - master
            tags:
              only: /.*/
      - deploy-tag:
          requires:
            - build
            - opengl
            - cuda
            - opengl-cuda
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/
      - deploy-dev:
          requires:
            - build
            - opengl
            - cuda
            - opengl-cuda
          filters:
            branches:
              ignore:
                - master

  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - docs
