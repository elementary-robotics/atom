# .circleci/config.yml

#
# Parameters that can be set/changed for the build
#
parameters:

  # Atom parameters
  dockerhub_org:
    type: string
    default: ${DOCKERHUB_ORG}
  atom_repo_name:
    type: string
    default: ${DOCKERHUB_ATOM_REPO}
  nucleus_repo_name:
    type: string
    default: ${DOCKERHUB_NUCLEUS_REPO}
  cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_CACHE_REPO}
  dockerhub_user:
    type: string
    default: ${DOCKERHUB_USER}
  dockerhub_password:
    type: string
    default: ${DOCKEHUB_PASSWORD}

  # Docs parameters
  docs_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  docs_cache_repo:
    type: string
    default: ${DOCKERHUB_ORG}/${DOCKERHUB_DOCS_REPO}
  heroku_api_key:
    type: string
    default: ${HEROKU_API_KEY}
  heroku_app_name:
    type: string
    default: ${HEROKU_APP_NAME}


#
# Section for setting repeatedly used yaml anchors/aliases
#
aliases:

  #
  # Atom Build shared params
  #

  # Typical params for building atom
  - &build_atom_variant_shared_params
      variant:
        type: string
        default: ""
      platform:
        type: string
        default: amd64
      stage:
        type: string
        default: atom
      build_args:
        type: string
        default: ""
      base_repo:
        type: string
        default: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
      base_tag:
        type: string
        default: base
      cache_repo:
        type: string
        default: << pipeline.parameters.cache_repo >>
      test_valgrind:
        type: boolean
        default: true

  # Typical mapping of params for building atom.
  #   NOTE: you will always need to specify:
  #     - base_tag
  #   NOTE: if building atom and not a base, you will also need to specify:
  #     - production_image
  - &build_atom_variant_shared_mapping
      variant: << parameters.variant >>
      platform: << parameters.platform >>
      stage: << parameters.stage >>
      build_args: << parameters.build_args >>
      cache_repo: << parameters.cache_repo >>
      test_valgrind: << parameters.test_valgrind >>

  - &build_buildx_atom_variant_shared_mapping
      variant: << parameters.variant >>
      platform: << parameters.platform >>
      build_args: >-
        --build-arg BASE_IMAGE=<< parameters.base_repo >>:<< parameters.base_tag >>
        --build-arg PRODUCTION_IMAGE=<< parameters.production_image >>
        << parameters.build_args >>
      cache_repo: << parameters.cache_repo >>
      cache_tag: cache-atom

  # Name of the build job
  - &atom_matrix_build_job_name "build-atom-<< matrix.variant >>-<< matrix.platform >>"

  #
  # Deploy Configurations
  #

  # Atom Build Matrix
  - &atom_matrix
      parameters:
        variant: ["stock", "opengl", "cuda", "opengl-cuda"]
        platform: ["amd64", "aarch64"]
        component: ["atom", "nucleus"]
      exclude:
        # No opengl, CUDA, or opengl-cuda builds for AARCH64 atom
        - variant: "opengl"
          platform: "aarch64"
          component: "atom"
        - variant: "cuda"
          platform: "aarch64"
          component: "atom"
        - variant: "opengl-cuda"
          platform: "aarch64"
          component: "atom"

        # No opengl, CUDA, or opengl-cuda builds for AARCH64 nucleus
        - variant: "opengl"
          platform: "aarch64"
          component: "nucleus"
        - variant: "cuda"
          platform: "aarch64"
          component: "nucleus"
        - variant: "opengl-cuda"
          platform: "aarch64"
          component: "nucleus"

        # No opengl, CUDA, or opengl-cuda builds for AMD64 nucleus
        - variant: "opengl"
          platform: "amd64"
          component: "nucleus"
        - variant: "cuda"
          platform: "amd64"
          component: "nucleus"
        - variant: "opengl-cuda"
          platform: "amd64"
          component: "nucleus"

  # Shared config around deployment logic
  - &atom_deploy_shared_mapping
      source_image: << pipeline.parameters.dockerhub_org >>/<< matrix.component >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.dockerhub_org >>/<< matrix.component >>

  #
  # Base image info
  #

  # Base Build Matrix
  - &base_matrix
      parameters:
        variant: ["stock", "opengl", "cuda", "opengl-cuda"]
        platform: ["amd64", "aarch64"]
      exclude:
        - variant: "opengl"
          platform: "aarch64"
        - variant: "cuda"
          platform: "aarch64"
        - variant: "opengl-cuda"
          platform: "aarch64"


  # Base tags in use for the various builds
  - &base_build_atom_tag "base-3050"
  - &base_build_atom_opengl_tag "base-opengl-3051"
  - &base_build_atom_cuda_tag "base-cuda-3052"
  - &base_build_atom_aarch64_tag "base-aarch64-3048"
  - &base_build_tags
      source_tag:
        - *base_build_atom_tag
        - *base_build_atom_opengl_tag
        - *base_build_atom_cuda_tag
        - *base_build_atom_aarch64_tag

  # Helpful alias when building bases using additional Dockerfiles
  - &build_atom_base_add_shared_mapping
      prev_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
      prev_tag: << parameters.input_tag >>-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>

  #
  # Docs build shared info
  #
  - &docs_build_shared_config
      name: "build-docs"
      working_directory: doc
      file: Dockerfile
      image_name: << pipeline.parameters.docs_repo >>
      image_tag: build-<< pipeline.number >>
      cache_repo: << pipeline.parameters.docs_cache_repo >>
      cache_tag: cache-docs

  - &docs_deploy_shared_config
      source_image: << pipeline.parameters.docs_repo >>
      source_tag: build-<< pipeline.number >>
      target_image: << pipeline.parameters.docs_repo >>

#
# Circle config
#
version: 2.1

orbs:
  atom:  elementaryrobotics/atom@dev:311-orb-reorg

commands:

  run_tests:
    parameters:
      container:
        type: string
      test_valgrind:
        type: boolean
        default: true
    steps:
      - run:
          name: Python tests
          command: docker exec -it -w /atom/languages/python/tests << parameters.container >> pytest
      - run:
          name: C tests
          command:  docker exec -it -w /atom/languages/c << parameters.container >> make test
      - run:
          name: C++ tests
          command:  docker exec -it -w /atom/languages/cpp << parameters.container >> make test
      - when:
          condition: << parameters.test_valgrind >>
          steps:
            - run:
                name: C++ valgrind check
                command: docker exec -it -w /atom/languages/cpp << parameters.container >> valgrind -v --tool=memcheck --leak-check=full --num-callers=40 --log-file=valgrind.log --error-exitcode=1 test/build/test_atom_cpp
                environment:
                  G_SLICE: always-malloc
                  G_DEBUG: gc-friendly
            - run:
                name: C++ copy valgrind log
                command: docker cp << parameters.container >>:/atom/languages/cpp/valgrind.log /tmp/valgrind.log
      - store_artifacts:
          path: /tmp/valgrind.log
          destination: valgrind.log

  heroku_deploy:
    parameters:
      source_image:
        type: string
      source_tag:
        type: string
    steps:
      - run:
          command: |
            docker login --username=_ --password=<< pipeline.parameters.heroku_api_key >> registry.heroku.com
            docker tag << parameters.source_image >>:<< parameters.source_tag >> registry.heroku.com/${HEROKU_APP_NAME}/web
            docker push registry.heroku.com/${HEROKU_APP_NAME}/web
            heroku container:release -a << pipeline.parameters.heroku_app_name >> web

  set_atom_version:
    steps:
      - run:
          name: Add atom version to config file
          command: |
            python3 languages/python/version.py

  build_shared_init:
    steps:
      - checkout
      - atom/update_submodules
      - set_atom_version
      - atom/docker_login

  test_atom_variant:
    parameters:
      compose:
        type: string
      nucleus:
        type: string
      atom:
        type: string
      container:
        type: string
      test_valgrind:
        type: boolean
        default: true
    steps:

      # Launch containers for testing
      - atom/run_compose:
          file: << parameters.compose >>
          build_args: "NUCLEUS_IMAGE=<< parameters.nucleus >> ATOM_IMAGE=<< parameters.atom >>"
      # Run atom unit tests
      - run_tests:
          container: << parameters.container >>
          test_valgrind: << parameters.test_valgrind >>

  build_atom_variant:
    parameters:
      << : *build_atom_variant_shared_params
      production_image:
        type: string
        default: debian:buster-slim
      test_nucleus_tag:
        type: string
    steps:

      # Build atom + test
      - atom/build_dockerfile_buildx:
          stage: << parameters.stage >>
          image_tag: build-<< pipeline.number >>
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          << : *build_buildx_atom_variant_shared_mapping
      - atom/build_dockerfile_buildx:
          stage: test
          image_tag: build-<< pipeline.number >>-test
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          << : *build_buildx_atom_variant_shared_mapping

      # Tag and push atom build images
      - atom/push_image_variant:
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_tag: build-<< pipeline.number >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>
      - atom/push_image_variant:
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_tag: build-<< pipeline.number >>-test
          variant: << parameters.variant >>
          platform: << parameters.platform >>

      # Run Tests
      - test_atom_variant:
          compose: .circleci/docker-compose-circle.yml
          nucleus: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.nucleus_repo_name >>:<< parameters.test_nucleus_tag >>
          atom: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>:build-<< pipeline.number >>-test-<< parameters.variant >>-<< parameters.platform >>
          container: test_atom
          test_valgrind: << parameters.test_valgrind >>

  build_atom_with_nucleus_variant:
    parameters:
      << : *build_atom_variant_shared_params
      production_image:
        type: string
        default: debian:buster-slim
    steps:

      # Build nucleus
      - atom/build_dockerfile_buildx:
          stage: nucleus
          image_tag: build-<< pipeline.number >>
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.nucleus_repo_name >>
          << : *build_buildx_atom_variant_shared_mapping

      # Tag and push nucleus image
      - atom/push_image_variant:
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.nucleus_repo_name >>
          target_tag: build-<< pipeline.number >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>

      # Build and test the rest of atom
      - build_atom_variant:
          << : *build_atom_variant_shared_mapping
          base_tag: << parameters.base_tag >>
          production_image: << parameters.production_image >>
          test_nucleus_tag: build-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>

  build_atom_base_test:
    parameters:
      <<: *build_atom_variant_shared_params
      input_tag:
        type: string
        default: base-build-<< pipeline.number >>

    steps:

      # Build the atom variant with the base
      - build_atom_with_nucleus_variant:
          << : *build_atom_variant_shared_mapping
          base_tag: << parameters.input_tag >>-<< pipeline.number >>-<< parameters.variant >>-<< parameters.platform >>
          production_image: << parameters.base_repo >>:<< parameters.base_tag >>

  build_dockerfile_atom_base:
    parameters:
      << : *build_atom_variant_shared_params
      file:
        type: string
        default: Dockerfile-base
      image_tag:
        type: string
      prev_image:
        type: string
      prev_tag:
        type: string
      cache_tag:
        type: string
    steps:

      # Build the base
      - atom/build_dockerfile_buildx:
          file: << parameters.file >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>
          image_name: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          image_tag: << parameters.image_tag >>-<< pipeline.number >>
          build_args: >-
            --build-arg
            BASE_IMAGE=<< parameters.prev_image >>:<< parameters.prev_tag >>
            << parameters.build_args >>
          cache_tag: << parameters.cache_tag >>
          cache_repo: << parameters.cache_repo >>
          no_output_timeout: 3h

      # Push build image
      - atom/push_image_variant:
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_tag: << parameters.image_tag >>-<< pipeline.number >>
          variant: << parameters.variant >>
          platform: << parameters.platform >>

  build_atom_base:
    parameters:
      << : *build_atom_variant_shared_params
    steps:

      # Build the vanilla base
      - build_dockerfile_atom_base:
          << : *build_atom_variant_shared_mapping
          file: Dockerfile-base
          image_tag: base-build
          prev_image: << parameters.base_repo >>
          prev_tag: << parameters.base_tag >>
          cache_tag: cache-base

  build_atom_base_add_vnc:
    parameters:
      << : *build_atom_variant_shared_params
      input_tag:
        type: string
    prev_image:
    steps:

      # Build the vanilla base
      - build_dockerfile_atom_base:
          << : *build_atom_variant_shared_mapping
          << : *build_atom_base_add_shared_mapping
          file: Dockerfile-vnc
          image_tag: base-build-with-vnc
          cache_tag: cache-base-with-vnc

  build_atom_base_add_opengl:
    parameters:
      << : *build_atom_variant_shared_params
      input_tag:
        type: string
    prev_image:
    steps:

      # Build the vanilla base
      - build_dockerfile_atom_base:
          << : *build_atom_variant_shared_mapping
          << : *build_atom_base_add_shared_mapping
          file: Dockerfile-opengl
          image_tag: base-build-with-opengl
          cache_tag: cache-base-with-opengl

  build_atom_base_variant:
    parameters:
      << : *build_atom_variant_shared_params
    steps:

      # Build the vanilla base
      - build_atom_base:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

      # Push and Test
      - build_atom_base_test:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build_atom_base_variant_with_vnc:
    parameters:
      << : *build_atom_variant_shared_params
    steps:

      # Build the vanilla base
      - build_atom_base:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

      # Add in the VNC
      - build_atom_base_add_vnc:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build

      # Push and Test
      - build_atom_base_test:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build-with-vnc
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build_atom_base_variant_with_vnc_opengl:
    parameters:
      << : *build_atom_variant_shared_params
    steps:

      # Build the vanilla base
      - build_atom_base:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

      # Add in the VNC
      - build_atom_base_add_vnc:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build

      # Add in OpenGL
      - build_atom_base_add_opengl:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build-with-vnc

      # Push and Test
      - build_atom_base_test:
          << : *build_atom_variant_shared_mapping
          input_tag: base-build-with-opengl
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

jobs:

  build-atom-with-nucleus:
    parameters:
      << : *build_atom_variant_shared_params
      production_image:
        type: string
        default: debian:buster-slim
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_with_nucleus_variant:
          << : *build_atom_variant_shared_mapping
          base_tag: << parameters.base_tag >>
          production_image: << parameters.production_image >>

  build-atom:
    parameters:
      << : *build_atom_variant_shared_params
      production_image:
        type: string
        default: debian:buster-slim
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_variant:
          << : *build_atom_variant_shared_mapping
          base_tag: << parameters.base_tag >>
          production_image: << parameters.production_image >>
          test_nucleus_tag: build-<< pipeline.number >>-stock-<< parameters.platform >>

  build-base:
    parameters:
      << : *build_atom_variant_shared_params
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_base_variant:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build-base-with-vnc:
    parameters:
      << : *build_atom_variant_shared_params
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_base_variant_with_vnc:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build-base-with-vnc-opengl:
    parameters:
      << : *build_atom_variant_shared_params
    executor: atom/build-ubuntu
    resource_class: large
    steps:
      - build_shared_init
      - build_atom_base_variant_with_vnc_opengl:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build-base-xlarge:
    parameters:
      << : *build_atom_variant_shared_params
    executor: atom/build-ubuntu
    resource_class: xlarge
    steps:
      - build_shared_init
      - build_atom_base_variant:
          << : *build_atom_variant_shared_mapping
          base_repo: << parameters.base_repo >>
          base_tag: << parameters.base_tag >>

  build-docs:
    executor: atom/build-ubuntu
    steps:
      - checkout

      #
      # Build docker image
      #
      - atom/build_dockerfile_buildx:
          working_directory: doc
          stage: docs
          file: Dockerfile
          image_name: << pipeline.parameters.docs_repo >>
          image_tag: build-<< pipeline.number >>
          cache_repo: << pipeline.parameters.docs_cache_repo >>
          cache_tag: cache-docs

      # Push build image
      - atom/push_image:
          target_image: << pipeline.parameters.docs_repo >>
          target_tag: build-<< pipeline.number >>

  deploy-docs-heroku:
    executor: atom/build-ubuntu
    steps:
      - heroku_deploy:
          source_image: << pipeline.parameters.docs_repo >>
          source_tag: build-<< pipeline.number >>

workflows:
  version: 2

  #
  # Build and deploy atom
  #
  atom-build:
    jobs:

      # Run the style check on atom
      - atom/check_flake8:
          version: 3.7.0
          exclude: demo,doc,examples,utilities,*third-party,languages
          requires:
            - build-atom-stock-amd64
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      #
      # Build + test stock atom
      #


      #
      # Build variants of atom:
      #   AMD64
      #     - stock
      #     - opengl
      #     - opengl-cuda
      #     - cuda
      #   AARCH64
      #     - stock
      #

      #
      # AMD64 / Intel
      #

      # AMD64 stock-- Note: stock builds with nucleus
      - build-atom-with-nucleus:
          name: *atom_matrix_build_job_name
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_tag
          production_image: debian:buster-slim
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # AMD64 openGL
      - build-atom:
          name: *atom_matrix_build_job_name
          matrix:
            parameters:
              variant: [ opengl ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_opengl_tag
          production_image: nvidia/opengl:1.0-glvnd-runtime-ubuntu18.04
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # AMD64 CUDA
      - build-atom:
          name: *atom_matrix_build_job_name
          matrix:
            parameters:
              variant: [ cuda ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_cuda_tag
          production_image: nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # AMD64 OpenGL + CUDA
      - build-atom:
          name: *atom_matrix_build_job_name
          matrix:
            parameters:
              variant: [ opengl-cuda ]
              platform: [ amd64 ]
          base_tag: *base_build_atom_cuda_tag
          production_image: nvidia/cuda:10.2-cudnn7-runtime-ubuntu18.04
          build_args: --build-arg INSTALL_OPENGL=y --build-arg
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      #
      # AARCH64 / ARM
      #

      # AARCH64 stock-- Note: stock builds with nucleus
      - build-atom-with-nucleus:
          name: *atom_matrix_build_job_name
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ aarch64 ]
          base_tag: *base_build_atom_aarch64_tag
          production_image: debian:buster-slim
          test_valgrind: false
          requires:
            - atom/check_flake8
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      #
      # Atom Development tags: development-YYY
      #
      - atom/deploy:
          name: "deploy-dev-<< matrix.component >>-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: development-<< pipeline.number >>
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              ignore:
                - master
      #
      # Atom Development tags: development-YYY-variant-platform
      #
      - atom/deploy:
          name: "deploy-dev-<< matrix.component >>-variant-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: development-<< pipeline.number >>
          target_tag_cmd: "grep '.*'"
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              ignore:
                - master

      #
      # Atom Master tags: master-YYY
      #
      - atom/deploy:
          name: "deploy-master-<< matrix.component >>-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: master-<< pipeline.number >>
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              only:
                - master

      #
      # Atom Master tags: master-YYY-variant-platform
      #
      - atom/deploy:
          name: "deploy-master-<< matrix.component >>-variant-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: master-<< pipeline.number >>
          target_tag_cmd: "grep '.*'"
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              only:
                - master

      #
      # Atom Latest tags: latest + aarch64 + opengl-cuda, etc.
      #
      - atom/deploy_latest:
          name: "deploy-latest-<< matrix.component >>-variant-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag_cmd: "grep -oP '(?<=-).*' | sed s/stock/latest/g | sed s/-amd64//g | sed s/latest-aarch64/aarch64/g"
          target_tag: ""
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              only:
                - master
      #
      # Atom Latest tags: variant-platform
      #
      - atom/deploy_latest:
          name: "deploy-latest-<< matrix.component >>-variant-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: ""
          target_tag_cmd: "grep -oP '(?<=-).*'"
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              only:
                - master

      #
      # Atom Release tags: Git tag
      #
      - atom/deploy:
          name: "deploy-tag-<< matrix.component >>-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: ${CIRCLE_TAG}
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

      #
      # Atom Release tags: Git tag-variant-platform
      #
      - atom/deploy:
          name: "deploy-tag-<< matrix.component >>-variant-<< matrix.variant >>-<< matrix.platform >>"
          << : *atom_deploy_shared_mapping
          target_tag: ${CIRCLE_TAG}
          target_tag_cmd: "grep '.*'"
          matrix:
            << : *atom_matrix
          requires:
            - *atom_matrix_build_job_name
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build and deploy the docs
  #
  docs-build:
    jobs:

      # Build the docs themselves
      - atom/build_buildx:
          << : *docs_build_shared_config
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /.*-build-base.*/

      # Builds of dev branches, deploy development-X
      - atom/deploy:
          name: "deploy-docs-dev"
          << : *docs_deploy_shared_config
          target_tag: development-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - master

      # Builds of master branches. Deploy latest, master-Y and Heroku
      - atom/deploy:
          name: "deploy-docs-master-latest"
          << : *docs_deploy_shared_config
          target_tag: latest
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - atom/deploy:
          name: "deploy-docs-master-num"
          << : *docs_deploy_shared_config
          target_tag: master-<< pipeline.number >>
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - deploy-docs-heroku:
          name: "deploy-docs-master-heroku"
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master

      # Builds of tag branches, deploy tag
      - atom/deploy:
          name: "deploy-docs-tag"
          << : *docs_deploy_shared_config
          target_tag: ${CIRCLE_TAG}
          requires:
            - build-docs
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /.*/

  #
  # Build and deploy base images
  #
  base-build:
    jobs:

      # Build base images
      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ amd64 ]
          base_repo: debian
          base_tag: buster-slim
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-atom/

      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ stock ]
              platform: [ aarch64 ]
          base_repo: debian
          base_tag: buster-slim
          build_args: "--build-arg BLAS_TARGET_CPU=ARMV8 --build-arg PYARROW_EXTRA_CMAKE_ARGS=-DARROW_ARMV8_ARCH=armv8-a"
          test_valgrind: false
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-aarch64/

      - build-base-with-vnc:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ opengl ]
              platform: [ amd64 ]
          base_repo: nvidia/opengl
          base_tag: 1.0-glvnd-runtime-ubuntu18.04
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-opengl/

      - build-base:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ cuda ]
              platform: [ amd64 ]
          base_repo: nvidia/cuda
          base_tag: 10.2-cudnn7-runtime-ubuntu18.04
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-cuda/

      - build-base-with-vnc-opengl:
          name: "build-base-<< matrix.variant >>-<< matrix.platform >>"
          matrix:
            parameters:
              variant: [ opengl-cuda ]
              platform: [ amd64 ]
          base_repo: nvidia/cuda
          base_tag: 10.2-cudnn7-runtime-ubuntu18.04
          filters:
            branches:
              only:
                - /.*-build-base-all/
                - /.*-build-base-opengl-cuda/

      # Deploy base images. Don't need branch filters since they depend
      # on base builds with the branch filters
      - atom/deploy:
          name: "deploy-base-dev-<< matrix.variant >>-<< matrix.platform >>"
          source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          source_tag: base-build-<< pipeline.number >>
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_tag: base-<< pipeline.number >>
          target_tag_cmd: "grep '.*'"
          matrix:
            << : *base_matrix
          requires:
            - "build-base-<< matrix.variant >>-<< matrix.platform >>"

      # Bump the base tags when merging into master
      - atom/deploy:
          name: "deploy-base-master-<< matrix.source_tag >>"
          source_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_image: << pipeline.parameters.dockerhub_org >>/<< pipeline.parameters.atom_repo_name >>
          target_tag: << matrix.source_tag >>
          target_tag_cmd: sed s/-stock//g | sed s/-amd64//g | grep -oP '[\-a-z0-9]+(?=-[0-9]+)'
          matrix:
            parameters:
              << : *base_build_tags
          filters:
            branches:
              only:
                - master


  #
  # Nightly rebuild/redeploy of docs sites
  #
  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - atom/build_buildx:
          << : *docs_build_shared_config

      - atom/deploy:
          name: "deploy-docs"
          << : *docs_deploy_shared_config
          target_tag: development-<< pipeline.number >>
          requires:
            - "build-docs"
          filters:
            branches:
              ignore:
                - master
