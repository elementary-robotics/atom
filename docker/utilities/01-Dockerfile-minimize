################################################################################
#
# Dockerfile for minimizing a build and only copying over
#   libraries and the python virtual environment
#
################################################################################

# Previous base we're going to build atop
ARG BASE_IMAGE
# Image this version of atom will ship with. Needed to determine which
#   libraries we need to package up
ARG PRODUCTION_IMAGE

#
# Determine libraries that are already in production
#
FROM ${PRODUCTION_IMAGE} as no-deps
# Auto-set by Docker based on the --platform flag. Will be of the form
#   linux/amd64 or linux/aarch64
ARG TARGETPLATFORM
RUN echo ${TARGETPLATFORM} | sed s/linux\\///g | sed s/amd64/x86_64/g > /tmp/arch.txt
RUN ls /lib/$( cat /tmp/arch.txt )-linux-gnu/*.so* > /tmp/existing_libs.txt && \
    ls /usr/lib/$( cat /tmp/arch.txt )-linux-gnu/*.so* >> /tmp/existing_libs.txt

#
# Copy missing libraries into /usr/local/lib
#
FROM ${BASE_IMAGE} as with-deps
ARG ADDITIONAL_LIB_LOCATIONS=""
ARG ADDITIONAL_FILES=""
ARG PRODUCTION_PACKAGES=""

# Add the lib locations and files onto the ones we're tracking. This way
#   we don't need subsequent base builds to keep passing the same arguments
#   around
RUN mkdir -p /minimize
RUN echo ${ADDITIONAL_LIB_LOCATIONS} | tr , '\n' >> /minimize/additional_libs.txt
RUN echo ${ADDITIONAL_FILES} | tr , '\n' >> /minimize/additional_files.txt
RUN echo ${PRODUCTION_PACKAGES} | tr , '\n' >> /minimize/production_packages.txt

# Figure out which libraries we need
ADD ./ldd_find_libs.sh /tmp/ldd_find_libs.sh
RUN /tmp/ldd_find_libs.sh

# Copy over the file that lets us know what's already in the final
#   image we're being built atop
COPY --from=no-deps /tmp/existing_libs.txt /tmp/existing_libs.txt

# Figure out what we need to copy into /usr/local/lib.
RUN diff --new-line-format="" --unchanged-line-format=""  /tmp/required_libs.txt /tmp/existing_libs.txt | grep -v /usr/local/lib > /tmp/libs_to_copy.txt || exit 0

# Copy things into /usr/local/lib
RUN if [ -s /tmp/libs_to_copy.txt ];then xargs -a /tmp/libs_to_copy.txt cp -L -t /usr/local/lib; fi

# Remove Python installs from /usr/local/lib
RUN rm -rf /usr/local/lib/python3.7

# And create the output tarball
WORKDIR /
RUN tar -czvpf minimized.tar.gz /usr/local/lib /usr/local/include /usr/local/bin /opt/venv /usr/lib/python* /usr/bin/python* /etc/ssl /minimize $(cat /minimize/additional_files.txt)

# Note that we should just spin up
CMD ["tail", "-f", "/dev/null"]
