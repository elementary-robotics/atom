////////////////////////////////////////////////////////////////////////////////
//
//  @file element_read_map.cc
//
//  @brief Element read map implementation
//
//  @copy 2018 Elementary Robotics. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
#include <string.h>

#include "element_read_map.h"
#include "atom/atom.h"

namespace atom {

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Constructor. Nothing allocated, just a placeholder
//
////////////////////////////////////////////////////////////////////////////////
ElementReadMap::ElementReadMap()
{
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Destructor. Free the memory we copied
//
////////////////////////////////////////////////////////////////////////////////
ElementReadMap::~ElementReadMap()
{
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Adds a handler to an ElementReadMap
//
////////////////////////////////////////////////////////////////////////////////
void ElementReadMap::addHandler(
	std::string &element,
	std::string &stream,
	std::vector<std::string> &keys,
	readHandlerFn fn,
	void *user_data)
{
	handlers.emplace_back(element, stream, keys, fn, user_data);
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Adds a handler to an ElementReadMap
//
////////////////////////////////////////////////////////////////////////////////
void ElementReadMap::addHandler(
	std::string &element,
	std::string &stream,
	std::vector<std::string> &keys,
	readHandlerFn fn)
{
	addHandler(element, stream, keys, fn, NULL);
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the number of handlers
//
////////////////////////////////////////////////////////////////////////////////
size_t ElementReadMap::getNumHandlers()
{
	return handlers.size();
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the tuple of the Nth handler
//
////////////////////////////////////////////////////////////////////////////////
handler_t &ElementReadMap::getHandler(
	int n)
{
	return handlers.at(n);
}

} // namespace atom
