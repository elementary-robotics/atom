////////////////////////////////////////////////////////////////////////////////
//
//  @file element_response.cc
//
//  @brief Element response implementation
//
//  @copy 2018 Elementary Robotics. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
#include <mutex>
#include <queue>
#include <malloc.h>
#include <assert.h>
#include <string.h>

#include "atom/atom.h"
#include "atom/redis.h"
#include "atom/element.h"
#include "element.h"

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Constructor. Nothing allocated, just a placeholder
//
////////////////////////////////////////////////////////////////////////////////
ElementResponse::ElementResponse() :
	data(""),
	err(0),
	err_str("")
{
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Destructor. Nothing to do at the moment
//
////////////////////////////////////////////////////////////////////////////////
ElementResponse::~ElementResponse()
{
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Sets the data
//
////////////////////////////////////////////////////////////////////////////////
void ElementResponse::setData(
	const uint8_t *d,
	size_t l)
{
	if (l != 0) {
		data = std::string((const char *)d, l);
	}
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Sets the data
//
////////////////////////////////////////////////////////////////////////////////
void ElementResponse::setData(
	std::string d)
{
	data = d;
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Checks to see if the response has data
//
////////////////////////////////////////////////////////////////////////////////
bool ElementResponse::hasData()
{
	return (data.size() != 0);
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Sets the error
//
////////////////////////////////////////////////////////////////////////////////
void ElementResponse::setError(
	int e,
	const char *s)
{
	err = e;
	if (s != NULL) {
		err_str = std::string(s);
	}
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Sets the error
//
////////////////////////////////////////////////////////////////////////////////
void ElementResponse::setError(
	int e,
	std::string s)
{
	err = e;
	err_str = s;
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets a pointer to the data
//
////////////////////////////////////////////////////////////////////////////////
const uint8_t *ElementResponse::getDataPtr()
{
	return (const uint8_t*)data.c_str();
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the length of the data
//
////////////////////////////////////////////////////////////////////////////////
size_t ElementResponse::getDataLen()
{
	return data.size();
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Returns the data string itself
//
////////////////////////////////////////////////////////////////////////////////
const std::string &ElementResponse::getData()
{
	return data;
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the error
//
////////////////////////////////////////////////////////////////////////////////
int ElementResponse::getError()
{
	return err;
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Checks to see if the response is an error
//
////////////////////////////////////////////////////////////////////////////////
bool ElementResponse::isError()
{
	return (getError() != ATOM_NO_ERROR);
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the error string pointer
//
////////////////////////////////////////////////////////////////////////////////
const uint8_t *ElementResponse::getErrorStrPtr()
{
	return (const uint8_t*)err_str.c_str();
}

////////////////////////////////////////////////////////////////////////////////
//
//  @brief Gets the error string
//
////////////////////////////////////////////////////////////////////////////////
const std::string &ElementResponse::getErrorStr()
{
	return err_str;
}
